2025-04-20 20:01:23,196{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --bin fly-io --node-count 2 --time-limit 1 --rate 1
2025-04-20 20:01:23,282{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 2
 :availability nil
 :max-txn-length 4
 :concurrency 2
 :db
 #object[maelstrom.db$db$reify__16612
         "0x2c9573f1"
         "maelstrom.db$db$reify__16612@2c9573f1"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x4b954cbb" "2025-04-20T20:01:23.178+05:30"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15721
         "0xbec2d81"
         "maelstrom.net$jepsen_net$reify__15721@bec2d81"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__17142
         "0x5f04449a"
         "maelstrom.workload.broadcast$client$reify__17142@5f04449a"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x5634c26c"
         "java.util.concurrent.CyclicBarrier@5634c26c"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 1.0
 :checker
 #object[jepsen.checker$compose$reify__11089
         "0x37a5ac85"
         "jepsen.checker$compose$reify__11089@37a5ac85"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--bin"
  "fly-io"
  "--node-count"
  "2"
  "--time-limit"
  "1"
  "--rate"
  "1")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16905@5d4f0fd5"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16886@2092b072"]})
 :nodes ["n0" "n1"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "fly-io"
 :generator
 #object[jepsen.util.Forgettable
         "0xe18848d"
         ((jepsen.generator.Synchronize
           {:gen (jepsen.generator.TimeLimit
                  {:limit 1000000000,
                   :cutoff nil,
                   :gen (jepsen.generator.Any
                         {:gens [(jepsen.generator.OnThreads
                                  {:f #{:nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x6ba6f4e7"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@6ba6f4e7"],
                                   :gen nil})
                                 (jepsen.generator.OnThreads
                                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x3d45ea17"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@3d45ea17"],
                                   :gen (jepsen.generator.Stagger
                                         {:dt 2000000000,
                                          :next-time nil,
                                          :gen (jepsen.generator.Mix
                                                {:i 0,
                                                 :gens [({:f :broadcast,
                                                          :value 0}
                                                         {:f :broadcast,
                                                          :value 1}
                                                         {:f :broadcast,
                                                          :value 2}
                                                         {:f :broadcast,
                                                          :value 3}
                                                         {:f :broadcast,
                                                          :value 4}
                                                         {:f :broadcast,
                                                          :value 5}
                                                         {:f :broadcast,
                                                          :value 6}
                                                         {:f :broadcast,
                                                          :value 7}
                                                         ...)
                                                        ({:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         ...)]})})})]})})})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x24a696c0"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@24a696c0"],
                   :gen ()})})
          (jepsen.generator.Synchronize
           {:gen {:type :log, :value "Waiting for recovery..."}})
          (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x78fb4f7f"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@78fb4f7f"],
                   :gen (jepsen.generator.EachThread
                         {:fresh-gen {:f :read, :final? true},
                          :context-filters #object[clojure.core$promise$reify__8621
                                                   "0x6a7c1725"
                                                   {:status :pending, :val nil}],
                          :gens {}})})}))]
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15724
         "0x756476a3"
         "maelstrom.net$jepsen_os$reify__15724@756476a3"]
 :time-limit 1
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2025-04-20 20:01:24,836{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2025-04-20 20:01:24,838{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2025-04-20 20:01:24,839{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2025-04-20 20:01:24,841{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2025-04-20 20:01:24,841{GMT}	INFO	[jepsen node n1] maelstrom.process: launching fly-io []
2025-04-20 20:01:24,843{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2025-04-20 20:01:24,846{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2025-04-20 20:01:24,847{GMT}	INFO	[jepsen node n0] maelstrom.process: launching fly-io []
2025-04-20 20:01:24,874{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2025-04-20 20:01:24,891{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:broadcast	0
2025-04-20 20:01:25,488{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:broadcast	1
2025-04-20 20:01:29,900{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:info	:broadcast	0	:net-timeout
2025-04-20 20:01:30,490{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:info	:broadcast	1	:net-timeout
2025-04-20 20:01:30,492{GMT}	INFO	[jepsen worker nemesis] jepsen.generator.interpreter: Waiting for recovery...
2025-04-20 20:01:40,496{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:invoke	:read	nil
2025-04-20 20:01:40,496{GMT}	INFO	[jepsen worker 1] jepsen.util: 3	:invoke	:read	nil
2025-04-20 20:01:45,498{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:fail	:read	nil	:net-timeout
2025-04-20 20:01:45,498{GMT}	INFO	[jepsen worker 1] jepsen.util: 3	:fail	:read	nil	:net-timeout
2025-04-20 20:01:45,548{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2025-04-20 20:01:45,602{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2025-04-20 20:01:45,602{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2025-04-20 20:01:46,504{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2025-04-20 20:01:46,507{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
clojure.lang.ExceptionInfo: Node n1 crashed with exit status 2. Before crashing, it wrote to STDOUT:

{"src":"n1","dest":"c0","body":{"in_reply_to":1,"type":"init_ok"}}
{"src":"n1","dest":"c3","body":{"in_reply_to":1,"type":"topology_ok"}}

And to STDERR:

2025/04/20 20:01:24 Received {c0 n1 {"type":"init","node_id":"n1","node_ids":["n0","n1"],"msg_id":1}}
2025/04/20 20:01:24 Node n1 initialized
2025/04/20 20:01:24 Sent {"src":"n1","dest":"c0","body":{"in_reply_to":1,"type":"init_ok"}}
2025/04/20 20:01:24 Received {c3 n1 {"type":"topology","topology":{"n0":["n1"],"n1":["n0"]},"msg_id":1}}
2025/04/20 20:01:24 Sent {"src":"n1","dest":"c3","body":{"in_reply_to":1,"type":"topology_ok"}}
2025/04/20 20:01:25 Received {c5 n1 {"type":"broadcast","message":1,"msg_id":1}}
panic: assignment to entry in nil map

goroutine 9 [running]:
main.(*Messages).RegisterMessage(0x5e0f40, 0x1, {0x4e4f60, 0xc000184630}, {0xc000184284, 0x2}, {0x0?, 0x0?, 0x0?})
	/home/divi/git/fly.io/maelstrom_broadcast.go:58 +0x256
main.main.maelstromBroadcast.func3({{0xc0000144c8, 0x2}, {0xc0000144ca, 0x2}, {0xc00001e1e0, 0x2b, 0x30}})
	/home/divi/git/fly.io/maelstrom_broadcast.go:120 +0xe5
github.com/jepsen-io/maelstrom/demo/go.(*Node).handleMessage(0xc000036080, 0x0?, {{0xc0000144c8, 0x2}, {0xc0000144ca, 0x2}, {0xc00001e1e0, 0x2b, 0x30}})
	/home/divi/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20250204203845-8263d1dd2b7a/node.go:151 +0x8d
github.com/jepsen-io/maelstrom/demo/go.(*Node).Run.func2()
	/home/divi/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20250204203845-8263d1dd2b7a/node.go:129 +0x77
created by github.com/jepsen-io/maelstrom/demo/go.(*Node).Run in goroutine 1
	/home/divi/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20250204203845-8263d1dd2b7a/node.go:127 +0x4f8

Full STDERR logs are available in /home/divi/git/fly.io/store/broadcast/20250420T200123.178+0530/node-logs/n1.log
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$stop_node_BANG_.invokeStatic(process.clj:239)
	at maelstrom.process$stop_node_BANG_.invoke(process.clj:217)
	at maelstrom.db$db$reify__16612.teardown_BANG_(db.clj:75)
	at jepsen.db$fn__11629$G__11610__11633.invoke(db.clj:12)
	at jepsen.db$fn__11629$G__11609__11638.invoke(db.clj:12)
	at clojure.core$partial$fn__5927.invoke(core.clj:2642)
	at jepsen.control$on_nodes$fn__9552.invoke(control.clj:319)
	at clojure.lang.AFn.applyToHelper(AFn.java:154)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.applyTo(RestFn.java:145)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5837.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:411)
	at dom_top.core$real_pmap_helper$build_thread__730$fn__731.invoke(core.clj:163)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.invoke(RestFn.java:428)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.RestFn.applyTo(RestFn.java:135)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5837.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:400)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.base/java.lang.Thread.run(Thread.java:840)
