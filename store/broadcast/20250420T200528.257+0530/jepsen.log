2025-04-20 20:05:28,281{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --bin fly-io --node-count 2 --time-limit 1 --rate 1
2025-04-20 20:05:28,378{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 2
 :availability nil
 :max-txn-length 4
 :concurrency 2
 :db
 #object[maelstrom.db$db$reify__16612
         "0x178826db"
         "maelstrom.db$db$reify__16612@178826db"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x3a1dc432" "2025-04-20T20:05:28.257+05:30"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15721
         "0x4c18b432"
         "maelstrom.net$jepsen_net$reify__15721@4c18b432"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__17142
         "0x4b954cbb"
         "maelstrom.workload.broadcast$client$reify__17142@4b954cbb"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0xbec2d81"
         "java.util.concurrent.CyclicBarrier@bec2d81"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 1.0
 :checker
 #object[jepsen.checker$compose$reify__11089
         "0x5f04449a"
         "jepsen.checker$compose$reify__11089@5f04449a"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--bin"
  "fly-io"
  "--node-count"
  "2"
  "--time-limit"
  "1"
  "--rate"
  "1")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16905@5634c26c"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16886@37a5ac85"]})
 :nodes ["n0" "n1"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "fly-io"
 :generator
 #object[jepsen.util.Forgettable
         "0x1acd660d"
         ((jepsen.generator.Synchronize
           {:gen (jepsen.generator.TimeLimit
                  {:limit 1000000000,
                   :cutoff nil,
                   :gen (jepsen.generator.Any
                         {:gens [(jepsen.generator.OnThreads
                                  {:f #{:nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x36cc6055"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@36cc6055"],
                                   :gen nil})
                                 (jepsen.generator.OnThreads
                                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x41d1bcbd"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@41d1bcbd"],
                                   :gen (jepsen.generator.Stagger
                                         {:dt 2000000000,
                                          :next-time nil,
                                          :gen (jepsen.generator.Mix
                                                {:i 0,
                                                 :gens [({:f :broadcast,
                                                          :value 0}
                                                         {:f :broadcast,
                                                          :value 1}
                                                         {:f :broadcast,
                                                          :value 2}
                                                         {:f :broadcast,
                                                          :value 3}
                                                         {:f :broadcast,
                                                          :value 4}
                                                         {:f :broadcast,
                                                          :value 5}
                                                         {:f :broadcast,
                                                          :value 6}
                                                         {:f :broadcast,
                                                          :value 7}
                                                         ...)
                                                        ({:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         ...)]})})})]})})})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x3d45ea17"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@3d45ea17"],
                   :gen ()})})
          (jepsen.generator.Synchronize
           {:gen {:type :log, :value "Waiting for recovery..."}})
          (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x685efb22"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@685efb22"],
                   :gen (jepsen.generator.EachThread
                         {:fresh-gen {:f :read, :final? true},
                          :context-filters #object[clojure.core$promise$reify__8621
                                                   "0x24a696c0"
                                                   {:status :pending, :val nil}],
                          :gens {}})})}))]
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15724
         "0x78fb4f7f"
         "maelstrom.net$jepsen_os$reify__15724@78fb4f7f"]
 :time-limit 1
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2025-04-20 20:05:29,864{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2025-04-20 20:05:29,866{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2025-04-20 20:05:29,868{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2025-04-20 20:05:29,875{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2025-04-20 20:05:29,876{GMT}	INFO	[jepsen node n1] maelstrom.process: launching fly-io []
2025-04-20 20:05:29,879{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2025-04-20 20:05:29,881{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2025-04-20 20:05:29,882{GMT}	INFO	[jepsen node n0] maelstrom.process: launching fly-io []
2025-04-20 20:05:29,911{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2025-04-20 20:05:29,931{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:broadcast	0
2025-04-20 20:05:29,935{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:broadcast	0
2025-04-20 20:05:29,936{GMT}	INFO	[jepsen worker 1] jepsen.generator.interpreter: Waiting for recovery...
2025-04-20 20:05:39,938{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:read	nil
2025-04-20 20:05:39,938{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2025-04-20 20:05:39,945{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:read	[{}]
2025-04-20 20:05:44,941{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:fail	:read	nil	:net-timeout
2025-04-20 20:05:44,962{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2025-04-20 20:05:45,006{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2025-04-20 20:05:45,006{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2025-04-20 20:05:45,945{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2025-04-20 20:05:45,947{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
clojure.lang.ExceptionInfo: Node n1 crashed with exit status 1. Before crashing, it wrote to STDOUT:

{"src":"n1","dest":"c0","body":{"in_reply_to":1,"type":"init_ok"}}
{"src":"n1","dest":"c3","body":{"in_reply_to":1,"type":"topology_ok"}}

And to STDERR:

2025/04/20 20:05:29 Received {c0 n1 {"type":"init","node_id":"n1","node_ids":["n0","n1"],"msg_id":1}}
2025/04/20 20:05:29 Node n1 initialized
2025/04/20 20:05:29 Sent {"src":"n1","dest":"c0","body":{"in_reply_to":1,"type":"init_ok"}}
2025/04/20 20:05:29 Received {c3 n1 {"type":"topology","topology":{"n0":["n1"],"n1":["n0"]},"msg_id":1}}
2025/04/20 20:05:29 Sent {"src":"n1","dest":"c3","body":{"in_reply_to":1,"type":"topology_ok"}}
2025/04/20 20:05:29 Received {n0 n1 {"message":0,"msg_id":1,"seen_nodes":["n0","n1"],"type":"gossip"}}
2025/04/20 20:05:29 No handler for {"id":9,"src":"n0","dest":"n1","body":{"message":0,"msg_id":1,"seen_nodes":["n0","n1"],"type":"gossip"}}

Full STDERR logs are available in /home/divi/git/fly.io/store/broadcast/20250420T200528.257+0530/node-logs/n1.log
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$stop_node_BANG_.invokeStatic(process.clj:239)
	at maelstrom.process$stop_node_BANG_.invoke(process.clj:217)
	at maelstrom.db$db$reify__16612.teardown_BANG_(db.clj:75)
	at jepsen.db$fn__11629$G__11610__11633.invoke(db.clj:12)
	at jepsen.db$fn__11629$G__11609__11638.invoke(db.clj:12)
	at clojure.core$partial$fn__5927.invoke(core.clj:2642)
	at jepsen.control$on_nodes$fn__9552.invoke(control.clj:319)
	at clojure.lang.AFn.applyToHelper(AFn.java:154)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.applyTo(RestFn.java:145)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5837.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:411)
	at dom_top.core$real_pmap_helper$build_thread__730$fn__731.invoke(core.clj:163)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.invoke(RestFn.java:428)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.RestFn.applyTo(RestFn.java:135)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5837.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:400)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.base/java.lang.Thread.run(Thread.java:840)
