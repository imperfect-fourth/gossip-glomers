2025-04-20 18:06:41,280{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --bin fly-io --node-count 1 --time-limit 2 --rate 1
2025-04-20 18:06:41,372{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16612
         "0xb997735"
         "maelstrom.db$db$reify__16612@b997735"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x6cf58989" "2025-04-20T18:06:41.257+05:30"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15721
         "0x3a1dc432"
         "maelstrom.net$jepsen_net$reify__15721@3a1dc432"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__17142
         "0x4c18b432"
         "maelstrom.workload.broadcast$client$reify__17142@4c18b432"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x4b954cbb"
         "java.util.concurrent.CyclicBarrier@4b954cbb"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 1.0
 :checker
 #object[jepsen.checker$compose$reify__11089
         "0xbec2d81"
         "jepsen.checker$compose$reify__11089@bec2d81"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--bin"
  "fly-io"
  "--node-count"
  "1"
  "--time-limit"
  "2"
  "--rate"
  "1")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16905@5f04449a"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16886@5634c26c"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "fly-io"
 :generator
 #object[jepsen.util.Forgettable
         "0x239fdf8f"
         ((jepsen.generator.Synchronize
           {:gen (jepsen.generator.TimeLimit
                  {:limit 2000000000,
                   :cutoff nil,
                   :gen (jepsen.generator.Any
                         {:gens [(jepsen.generator.OnThreads
                                  {:f #{:nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x578036a2"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@578036a2"],
                                   :gen nil})
                                 (jepsen.generator.OnThreads
                                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x36cc6055"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@36cc6055"],
                                   :gen (jepsen.generator.Stagger
                                         {:dt 2000000000,
                                          :next-time nil,
                                          :gen (jepsen.generator.Mix
                                                {:i 0,
                                                 :gens [({:f :broadcast,
                                                          :value 0}
                                                         {:f :broadcast,
                                                          :value 1}
                                                         {:f :broadcast,
                                                          :value 2}
                                                         {:f :broadcast,
                                                          :value 3}
                                                         {:f :broadcast,
                                                          :value 4}
                                                         {:f :broadcast,
                                                          :value 5}
                                                         {:f :broadcast,
                                                          :value 6}
                                                         {:f :broadcast,
                                                          :value 7}
                                                         ...)
                                                        ({:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         ...)]})})})]})})})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x6ba6f4e7"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@6ba6f4e7"],
                   :gen ()})})
          (jepsen.generator.Synchronize
           {:gen {:type :log, :value "Waiting for recovery..."}})
          (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x3d45ea17"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@3d45ea17"],
                   :gen (jepsen.generator.EachThread
                         {:fresh-gen {:f :read, :final? true},
                          :context-filters #object[clojure.core$promise$reify__8621
                                                   "0x685efb22"
                                                   {:status :pending, :val nil}],
                          :gens {}})})}))]
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15724
         "0x24a696c0"
         "maelstrom.net$jepsen_os$reify__15724@24a696c0"]
 :time-limit 2
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2025-04-20 18:06:43,031{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2025-04-20 18:06:43,031{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2025-04-20 18:06:43,032{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2025-04-20 18:06:43,035{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2025-04-20 18:06:43,036{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2025-04-20 18:06:43,037{GMT}	INFO	[jepsen node n0] maelstrom.process: launching fly-io []
2025-04-20 18:06:43,070{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2025-04-20 18:06:43,090{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:broadcast	0
2025-04-20 18:06:43,114{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 0 crashed
clojure.lang.ExceptionInfo: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "broadcast", :message 0, :msg_id 1}

And expected a response of the form:

{:type (eq "broadcast_ok"), {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:in_reply_to 1, :message 0, :msg_id 1, :type "broadcast_ok"}

This is malformed because:

{:message disallowed-key}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$check_body.invokeStatic(client.clj:188)
	at maelstrom.client$check_body.invoke(client.clj:181)
	at maelstrom.workload.broadcast$fn__17063$broadcast_BANG___17064.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$fn__17063$broadcast_BANG___17064.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$client$reify__17142.invoke_BANG_(broadcast.clj:203)
	at jepsen.client.Validate.invoke_BANG_(client.clj:87)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__13749$fn__13750.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__13749.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5842.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-20 18:06:44,426{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:invoke	:read	nil
2025-04-20 18:06:44,451{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 1 crashed
clojure.lang.ExceptionInfo: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "read", :msg_id 1}

And expected a response of the form:

{:type (eq "read_ok"),
 :messages [Any],
 {:k :msg_id} Int,
 :in_reply_to Int}

... but instead received

{:in_reply_to 1, :messages {}, :msg_id 1, :type "read_ok"}

This is malformed because:

{:messages (not (sequential? {}))}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$check_body.invokeStatic(client.clj:188)
	at maelstrom.client$check_body.invoke(client.clj:181)
	at maelstrom.workload.broadcast$fn__17074$read__17075.invoke(broadcast.clj:34)
	at maelstrom.workload.broadcast$fn__17074$read__17075.invoke(broadcast.clj:34)
	at maelstrom.workload.broadcast$client$reify__17142.invoke_BANG_(broadcast.clj:207)
	at jepsen.client.Validate.invoke_BANG_(client.clj:87)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__13749$fn__13750.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__13749.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5842.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-20 18:06:44,452{GMT}	INFO	[jepsen worker 0] jepsen.generator.interpreter: Waiting for recovery...
2025-04-20 18:06:54,455{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:invoke	:read	nil
2025-04-20 18:06:54,469{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 2 crashed
clojure.lang.ExceptionInfo: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "read", :msg_id 1}

And expected a response of the form:

{:type (eq "read_ok"),
 :messages [Any],
 {:k :msg_id} Int,
 :in_reply_to Int}

... but instead received

{:in_reply_to 1, :messages {}, :msg_id 1, :type "read_ok"}

This is malformed because:

{:messages (not (sequential? {}))}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$check_body.invokeStatic(client.clj:188)
	at maelstrom.client$check_body.invoke(client.clj:181)
	at maelstrom.workload.broadcast$fn__17074$read__17075.invoke(broadcast.clj:34)
	at maelstrom.workload.broadcast$fn__17074$read__17075.invoke(broadcast.clj:34)
	at maelstrom.workload.broadcast$client$reify__17142.invoke_BANG_(broadcast.clj:207)
	at jepsen.client.Validate.invoke_BANG_(client.clj:87)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__13749$fn__13750.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__13749.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5842.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-20 18:06:54,489{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2025-04-20 18:06:54,539{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2025-04-20 18:06:56,040{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2025-04-20 18:06:56,041{GMT}	INFO	[jepsen test runner] jepsen.core: Analyzing...
2025-04-20 18:06:56,179{GMT}	INFO	[jepsen test runner] jepsen.core: Analysis complete
2025-04-20 18:06:56,196{GMT}	INFO	[jepsen results] jepsen.store: Wrote /home/divi/git/fly.io/store/broadcast/20250420T180641.257+0530/results.edn
2025-04-20 18:06:56,213{GMT}	INFO	[jepsen test runner] jepsen.core: {:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true,
              :exceptions ({:count 3,
                            :class clojure.lang.ExceptionInfo,
                            :example #jepsen.history.Op{:index 1,
                                                        :time 48542113,
                                                        :type :info,
                                                        :process 0,
                                                        :f :broadcast,
                                                        :value 0,
                                                        :exception {:via [{:type clojure.lang.ExceptionInfo,
                                                                           :message "Malformed RPC response. Maelstrom sent node n0 the following request:\n\n{:type \"broadcast\", :message 0, :msg_id 1}\n\nAnd expected a response of the form:\n\n{:type (eq \"broadcast_ok\"), {:k :msg_id} Int, :in_reply_to Int}\n\n... but instead received\n\n{:in_reply_to 1, :message 0, :msg_id 1, :type \"broadcast_ok\"}\n\nThis is malformed because:\n\n{:message disallowed-key}\n\nSee doc/protocol.md for more guidance.",
                                                                           :data {:type :malformed-rpc-response,
                                                                                  :body {:in_reply_to 1,
                                                                                         :message 0,
                                                                                         :msg_id 1,
                                                                                         :type "broadcast_ok"}},
                                                                           :at [slingshot.support$stack_trace
                                                                                invoke
                                                                                "support.clj"
                                                                                201]}],
                                                                    :trace [[slingshot.support$stack_trace
                                                                             invoke
                                                                             "support.clj"
                                                                             201]
                                                                            [maelstrom.client$check_body
                                                                             invokeStatic
                                                                             "client.clj"
                                                                             188]
                                                                            [maelstrom.client$check_body
                                                                             invoke
                                                                             "client.clj"
                                                                             181]
                                                                            [maelstrom.workload.broadcast$fn__17063$broadcast_BANG___17064
                                                                             invoke
                                                                             "broadcast.clj"
                                                                             27]
                                                                            [maelstrom.workload.broadcast$fn__17063$broadcast_BANG___17064
                                                                             invoke
                                                                             "broadcast.clj"
                                                                             27]
                                                                            [maelstrom.workload.broadcast$client$reify__17142
                                                                             invoke_BANG_
                                                                             "broadcast.clj"
                                                                             203]
                                                                            [jepsen.client.Validate
                                                                             invoke_BANG_
                                                                             "client.clj"
                                                                             87]
                                                                            [jepsen.generator.interpreter.ClientWorker
                                                                             invoke_BANG_
                                                                             "interpreter.clj"
                                                                             65]
                                                                            [jepsen.generator.interpreter$spawn_worker$fn__13749$fn__13750
                                                                             invoke
                                                                             "interpreter.clj"
                                                                             140]
                                                                            [jepsen.generator.interpreter$spawn_worker$fn__13749
                                                                             invoke
                                                                             "interpreter.clj"
                                                                             123]
                                                                            [clojure.core$binding_conveyor_fn$fn__5842
                                                                             invoke
                                                                             "core.clj"
                                                                             2047]
                                                                            [clojure.lang.AFn
                                                                             call
                                                                             "AFn.java"
                                                                             18]
                                                                            [java.util.concurrent.FutureTask
                                                                             run
                                                                             "FutureTask.java"
                                                                             264]
                                                                            [java.util.concurrent.ThreadPoolExecutor
                                                                             runWorker
                                                                             "ThreadPoolExecutor.java"
                                                                             1136]
                                                                            [java.util.concurrent.ThreadPoolExecutor$Worker
                                                                             run
                                                                             "ThreadPoolExecutor.java"
                                                                             635]
                                                                            [java.lang.Thread
                                                                             run
                                                                             "Thread.java"
                                                                             840]],
                                                                    :cause "Malformed RPC response. Maelstrom sent node n0 the following request:\n\n{:type \"broadcast\", :message 0, :msg_id 1}\n\nAnd expected a response of the form:\n\n{:type (eq \"broadcast_ok\"), {:k :msg_id} Int, :in_reply_to Int}\n\n... but instead received\n\n{:in_reply_to 1, :message 0, :msg_id 1, :type \"broadcast_ok\"}\n\nThis is malformed because:\n\n{:message disallowed-key}\n\nSee doc/protocol.md for more guidance.",
                                                                    :data {:type :malformed-rpc-response,
                                                                           :body {:in_reply_to 1,
                                                                                  :message 0,
                                                                                  :msg_id 1,
                                                                                  :type "broadcast_ok"}}},
                                                        :error "indeterminate: Malformed RPC response. Maelstrom sent node n0 the following request:\n\n{:type \"broadcast\", :message 0, :msg_id 1}\n\nAnd expected a response of the form:\n\n{:type (eq \"broadcast_ok\"), {:k :msg_id} Int, :in_reply_to Int}\n\n... but instead received\n\n{:in_reply_to 1, :message 0, :msg_id 1, :type \"broadcast_ok\"}\n\nThis is malformed because:\n\n{:message disallowed-key}\n\nSee doc/protocol.md for more guidance."}})},
 :stats {:valid? false,
         :count 3,
         :ok-count 0,
         :fail-count 0,
         :info-count 3,
         :by-f {:broadcast {:valid? false,
                            :count 1,
                            :ok-count 0,
                            :fail-count 0,
                            :info-count 1},
                :read {:valid? false,
                       :count 2,
                       :ok-count 0,
                       :fail-count 0,
                       :info-count 2}}},
 :availability {:valid? true, :ok-fraction 0.0},
 :net {:all {:send-count 10,
             :recv-count 10,
             :msg-count 10,
             :msgs-per-op 3.3333333},
       :clients {:send-count 10, :recv-count 10, :msg-count 10},
       :servers {:send-count 0,
                 :recv-count 0,
                 :msg-count 0,
                 :msgs-per-op 0.0},
       :valid? true},
 :workload {:worst-stale (),
            :duplicated-count 0,
            :valid? :unknown,
            :lost-count 0,
            :lost (),
            :stable-count 0,
            :stale-count 0,
            :stale (),
            :never-read-count 1,
            :attempt-count 1,
            :never-read (0),
            :duplicated {}},
 :valid? false}


Analysis invalid! (ﾉಥ益ಥ）ﾉ ┻━┻
