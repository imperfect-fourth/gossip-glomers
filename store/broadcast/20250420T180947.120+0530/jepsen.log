2025-04-20 18:09:47,143{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --bin fly-io --node-count 1 --time-limit 2 --rate 1
2025-04-20 18:09:47,255{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16612
         "0xb997735"
         "maelstrom.db$db$reify__16612@b997735"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x6cf58989" "2025-04-20T18:09:47.120+05:30"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15721
         "0x3a1dc432"
         "maelstrom.net$jepsen_net$reify__15721@3a1dc432"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__17142
         "0x4c18b432"
         "maelstrom.workload.broadcast$client$reify__17142@4c18b432"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x4b954cbb"
         "java.util.concurrent.CyclicBarrier@4b954cbb"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 1.0
 :checker
 #object[jepsen.checker$compose$reify__11089
         "0xbec2d81"
         "jepsen.checker$compose$reify__11089@bec2d81"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--bin"
  "fly-io"
  "--node-count"
  "1"
  "--time-limit"
  "2"
  "--rate"
  "1")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16905@5f04449a"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16886@5634c26c"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "fly-io"
 :generator
 #object[jepsen.util.Forgettable
         "0x239fdf8f"
         ((jepsen.generator.Synchronize
           {:gen (jepsen.generator.TimeLimit
                  {:limit 2000000000,
                   :cutoff nil,
                   :gen (jepsen.generator.Any
                         {:gens [(jepsen.generator.OnThreads
                                  {:f #{:nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x578036a2"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@578036a2"],
                                   :gen nil})
                                 (jepsen.generator.OnThreads
                                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x36cc6055"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@36cc6055"],
                                   :gen (jepsen.generator.Stagger
                                         {:dt 2000000000,
                                          :next-time nil,
                                          :gen (jepsen.generator.Mix
                                                {:i 1,
                                                 :gens [({:f :broadcast,
                                                          :value 0}
                                                         {:f :broadcast,
                                                          :value 1}
                                                         {:f :broadcast,
                                                          :value 2}
                                                         {:f :broadcast,
                                                          :value 3}
                                                         {:f :broadcast,
                                                          :value 4}
                                                         {:f :broadcast,
                                                          :value 5}
                                                         {:f :broadcast,
                                                          :value 6}
                                                         {:f :broadcast,
                                                          :value 7}
                                                         ...)
                                                        ({:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         ...)]})})})]})})})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x6ba6f4e7"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@6ba6f4e7"],
                   :gen ()})})
          (jepsen.generator.Synchronize
           {:gen {:type :log, :value "Waiting for recovery..."}})
          (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x3d45ea17"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@3d45ea17"],
                   :gen (jepsen.generator.EachThread
                         {:fresh-gen {:f :read, :final? true},
                          :context-filters #object[clojure.core$promise$reify__8621
                                                   "0x685efb22"
                                                   {:status :pending, :val nil}],
                          :gens {}})})}))]
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15724
         "0x24a696c0"
         "maelstrom.net$jepsen_os$reify__15724@24a696c0"]
 :time-limit 2
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2025-04-20 18:09:48,846{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2025-04-20 18:09:48,847{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2025-04-20 18:09:48,848{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2025-04-20 18:09:48,850{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2025-04-20 18:09:48,851{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2025-04-20 18:09:48,852{GMT}	INFO	[jepsen node n0] maelstrom.process: launching fly-io []
2025-04-20 18:09:48,882{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2025-04-20 18:09:48,903{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2025-04-20 18:09:48,927{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 0 crashed
clojure.lang.ExceptionInfo: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "read", :msg_id 1}

And expected a response of the form:

{:type (eq "read_ok"),
 :messages [Any],
 {:k :msg_id} Int,
 :in_reply_to Int}

... but instead received

{:in_reply_to 1, :messages {}, :msg_id 1, :type "read_ok"}

This is malformed because:

{:messages (not (sequential? {}))}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$check_body.invokeStatic(client.clj:188)
	at maelstrom.client$check_body.invoke(client.clj:181)
	at maelstrom.workload.broadcast$fn__17074$read__17075.invoke(broadcast.clj:34)
	at maelstrom.workload.broadcast$fn__17074$read__17075.invoke(broadcast.clj:34)
	at maelstrom.workload.broadcast$client$reify__17142.invoke_BANG_(broadcast.clj:207)
	at jepsen.client.Validate.invoke_BANG_(client.clj:87)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__13749$fn__13750.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__13749.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5842.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-20 18:09:49,065{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:invoke	:read	nil
2025-04-20 18:09:49,078{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 1 crashed
clojure.lang.ExceptionInfo: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "read", :msg_id 1}

And expected a response of the form:

{:type (eq "read_ok"),
 :messages [Any],
 {:k :msg_id} Int,
 :in_reply_to Int}

... but instead received

{:in_reply_to 1, :messages {}, :msg_id 1, :type "read_ok"}

This is malformed because:

{:messages (not (sequential? {}))}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$check_body.invokeStatic(client.clj:188)
	at maelstrom.client$check_body.invoke(client.clj:181)
	at maelstrom.workload.broadcast$fn__17074$read__17075.invoke(broadcast.clj:34)
	at maelstrom.workload.broadcast$fn__17074$read__17075.invoke(broadcast.clj:34)
	at maelstrom.workload.broadcast$client$reify__17142.invoke_BANG_(broadcast.clj:207)
	at jepsen.client.Validate.invoke_BANG_(client.clj:87)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__13749$fn__13750.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__13749.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5842.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-20 18:09:50,233{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:invoke	:broadcast	0
2025-04-20 18:09:50,237{GMT}	WARN	[n0 stdout] maelstrom.process: Error!
clojure.lang.ExceptionInfo: Node n0 printed a line to STDOUT which was not well-formed JSON:
=============================================================map[message:0 msg_id:1 type:broadcast]
Did you mean to encode this line as JSON? Or was this line intended for STDERR? See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$parse_msg$fn__16326.invoke(process.clj:47)
	at maelstrom.process$parse_msg.invokeStatic(process.clj:45)
	at maelstrom.process$parse_msg.invoke(process.clj:35)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349$fn__16351.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5842.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-20 18:09:55,234{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:info	:broadcast	0	:net-timeout
2025-04-20 18:09:55,235{GMT}	INFO	[jepsen worker nemesis] jepsen.generator.interpreter: Waiting for recovery...
2025-04-20 18:09:58,645{GMT}	INFO	[Jepsen shutdown hook] jepsen.core: Downloading DB logs before JVM shutdown...
