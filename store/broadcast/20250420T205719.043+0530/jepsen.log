2025-04-20 20:57:19,065{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --bin fly-io --node-count 2 --time-limit 2 --rate 1 --log-stderr true
2025-04-20 20:57:19,162{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args ["true"]
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 2
 :availability nil
 :max-txn-length 4
 :concurrency 2
 :db
 #object[maelstrom.db$db$reify__16612
         "0x4c18b432"
         "maelstrom.db$db$reify__16612@4c18b432"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x4b954cbb" "2025-04-20T20:57:19.043+05:30"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15721
         "0xbec2d81"
         "maelstrom.net$jepsen_net$reify__15721@bec2d81"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__17142
         "0x5f04449a"
         "maelstrom.workload.broadcast$client$reify__17142@5f04449a"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x5634c26c"
         "java.util.concurrent.CyclicBarrier@5634c26c"]
 :log-stderr true
 :pure-generators true
 :ssh {:dummy? true}
 :rate 1.0
 :checker
 #object[jepsen.checker$compose$reify__11089
         "0x37a5ac85"
         "jepsen.checker$compose$reify__11089@37a5ac85"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--bin"
  "fly-io"
  "--node-count"
  "2"
  "--time-limit"
  "2"
  "--rate"
  "1"
  "--log-stderr"
  "true")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16905@5d4f0fd5"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16886@2092b072"]})
 :nodes ["n0" "n1"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "fly-io"
 :generator
 #object[jepsen.util.Forgettable
         "0xe18848d"
         ((jepsen.generator.Synchronize
           {:gen (jepsen.generator.TimeLimit
                  {:limit 2000000000,
                   :cutoff nil,
                   :gen (jepsen.generator.Any
                         {:gens [(jepsen.generator.OnThreads
                                  {:f #{:nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x6ba6f4e7"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@6ba6f4e7"],
                                   :gen nil})
                                 (jepsen.generator.OnThreads
                                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x3d45ea17"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@3d45ea17"],
                                   :gen (jepsen.generator.Stagger
                                         {:dt 2000000000,
                                          :next-time nil,
                                          :gen (jepsen.generator.Mix
                                                {:i 1,
                                                 :gens [({:f :broadcast,
                                                          :value 0}
                                                         {:f :broadcast,
                                                          :value 1}
                                                         {:f :broadcast,
                                                          :value 2}
                                                         {:f :broadcast,
                                                          :value 3}
                                                         {:f :broadcast,
                                                          :value 4}
                                                         {:f :broadcast,
                                                          :value 5}
                                                         {:f :broadcast,
                                                          :value 6}
                                                         {:f :broadcast,
                                                          :value 7}
                                                         ...)
                                                        ({:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         ...)]})})})]})})})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x24a696c0"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@24a696c0"],
                   :gen ()})})
          (jepsen.generator.Synchronize
           {:gen {:type :log, :value "Waiting for recovery..."}})
          (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x78fb4f7f"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@78fb4f7f"],
                   :gen (jepsen.generator.EachThread
                         {:fresh-gen {:f :read, :final? true},
                          :context-filters #object[clojure.core$promise$reify__8621
                                                   "0x6a7c1725"
                                                   {:status :pending, :val nil}],
                          :gens {}})})}))]
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15724
         "0x756476a3"
         "maelstrom.net$jepsen_os$reify__15724@756476a3"]
 :time-limit 2
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2025-04-20 20:57:20,752{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2025-04-20 20:57:20,753{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2025-04-20 20:57:20,755{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2025-04-20 20:57:20,756{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2025-04-20 20:57:20,757{GMT}	INFO	[jepsen node n1] maelstrom.process: launching fly-io ["true"]
2025-04-20 20:57:20,759{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2025-04-20 20:57:20,762{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2025-04-20 20:57:20,763{GMT}	INFO	[jepsen node n0] maelstrom.process: launching fly-io ["true"]
2025-04-20 20:57:20,774{GMT}	INFO	[n0 stderr] maelstrom.process: 2025/04/20 20:57:20 Received {c1 n0 {"type":"init","node_id":"n0","node_ids":["n0","n1"],"msg_id":1}}
2025-04-20 20:57:20,774{GMT}	INFO	[n1 stderr] maelstrom.process: 2025/04/20 20:57:20 Received {c0 n1 {"type":"init","node_id":"n1","node_ids":["n0","n1"],"msg_id":1}}
2025-04-20 20:57:20,774{GMT}	INFO	[n1 stderr] maelstrom.process: 2025/04/20 20:57:20 Node n1 initialized
2025-04-20 20:57:20,774{GMT}	INFO	[n0 stderr] maelstrom.process: 2025/04/20 20:57:20 Node n0 initialized
2025-04-20 20:57:20,775{GMT}	INFO	[n1 stderr] maelstrom.process: 2025/04/20 20:57:20 Sent {"src":"n1","dest":"c0","body":{"in_reply_to":1,"type":"init_ok"}}
2025-04-20 20:57:20,775{GMT}	INFO	[n0 stderr] maelstrom.process: 2025/04/20 20:57:20 Sent {"src":"n0","dest":"c1","body":{"in_reply_to":1,"type":"init_ok"}}
2025-04-20 20:57:20,783{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2025-04-20 20:57:20,789{GMT}	INFO	[n0 stderr] maelstrom.process: 2025/04/20 20:57:20 Received {c2 n0 {"type":"topology","topology":{"n0":["n1"],"n1":["n0"]},"msg_id":1}}
2025-04-20 20:57:20,789{GMT}	INFO	[n1 stderr] maelstrom.process: 2025/04/20 20:57:20 Received {c3 n1 {"type":"topology","topology":{"n0":["n1"],"n1":["n0"]},"msg_id":1}}
2025-04-20 20:57:20,790{GMT}	INFO	[n1 stderr] maelstrom.process: 2025/04/20 20:57:20 Sent {"src":"n1","dest":"c3","body":{"in_reply_to":1,"type":"topology_ok"}}
2025-04-20 20:57:20,790{GMT}	INFO	[n0 stderr] maelstrom.process: 2025/04/20 20:57:20 Sent {"src":"n0","dest":"c2","body":{"in_reply_to":1,"type":"topology_ok"}}
2025-04-20 20:57:20,801{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2025-04-20 20:57:20,803{GMT}	INFO	[n0 stderr] maelstrom.process: 2025/04/20 20:57:20 Received {c4 n0 {"type":"read","msg_id":1}}
2025-04-20 20:57:20,804{GMT}	INFO	[n0 stderr] maelstrom.process: ================================ []
2025-04-20 20:57:20,804{GMT}	INFO	[n0 stderr] maelstrom.process: 2025/04/20 20:57:20 Sent {"src":"n0","dest":"c4","body":{"in_reply_to":1,"messages":[],"msg_id":1,"type":"read_ok"}}
2025-04-20 20:57:20,804{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:read	[]
2025-04-20 20:57:22,190{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:broadcast	0
2025-04-20 20:57:22,193{GMT}	INFO	[n1 stderr] maelstrom.process: 2025/04/20 20:57:22 Received {c5 n1 {"type":"broadcast","message":0,"msg_id":1}}
2025-04-20 20:57:22,194{GMT}	INFO	[n1 stderr] maelstrom.process: 2025/04/20 20:57:22 Sent {"src":"n1","dest":"n0","body":{"message":0,"msg_id":1,"seen_nodes":["n1","n0"],"type":"gossip"}}
2025-04-20 20:57:22,194{GMT}	INFO	[n1 stderr] maelstrom.process: 2025/04/20 20:57:22 Sent {"src":"n1","dest":"c5","body":{"in_reply_to":1,"type":"broadcast_ok"}}
2025-04-20 20:57:22,196{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:broadcast	0
2025-04-20 20:57:22,196{GMT}	INFO	[n0 stderr] maelstrom.process: 2025/04/20 20:57:22 Received {n1 n0 {"message":0,"msg_id":1,"seen_nodes":["n1","n0"],"type":"gossip"}}
2025-04-20 20:57:22,196{GMT}	INFO	[n0 stderr] maelstrom.process: 2025/04/20 20:57:22 Sent {"src":"n0","dest":"n1","body":{"already_seen":false,"in_reply_to":1,"seen_nodes":["n0","n1"],"type":"gossip_ok"}}
2025-04-20 20:57:22,196{GMT}	INFO	[jepsen worker nemesis] jepsen.generator.interpreter: Waiting for recovery...
2025-04-20 20:57:22,197{GMT}	INFO	[n1 stderr] maelstrom.process: 2025/04/20 20:57:22 Received {n0 n1 {"already_seen":false,"in_reply_to":1,"seen_nodes":["n0","n1"],"type":"gossip_ok"}}
2025-04-20 20:57:32,200{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:read	nil
2025-04-20 20:57:32,200{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2025-04-20 20:57:32,201{GMT}	INFO	[n1 stderr] maelstrom.process: 2025/04/20 20:57:32 Received {c5 n1 {"type":"read","msg_id":2}}
2025-04-20 20:57:32,201{GMT}	INFO	[n0 stderr] maelstrom.process: 2025/04/20 20:57:32 Received {c4 n0 {"type":"read","msg_id":2}}
2025-04-20 20:57:32,201{GMT}	INFO	[n1 stderr] maelstrom.process: ================================ [0]
2025-04-20 20:57:32,201{GMT}	INFO	[n0 stderr] maelstrom.process: ================================ [0]
2025-04-20 20:57:32,201{GMT}	INFO	[n1 stderr] maelstrom.process: 2025/04/20 20:57:32 Sent {"src":"n1","dest":"c5","body":{"in_reply_to":2,"messages":[0],"msg_id":2,"type":"read_ok"}}
2025-04-20 20:57:32,201{GMT}	INFO	[n0 stderr] maelstrom.process: 2025/04/20 20:57:32 Sent {"src":"n0","dest":"c4","body":{"in_reply_to":2,"messages":[0],"msg_id":2,"type":"read_ok"}}
2025-04-20 20:57:32,202{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:read	[0]
2025-04-20 20:57:32,202{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:read	[0]
2025-04-20 20:57:32,212{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2025-04-20 20:57:32,253{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2025-04-20 20:57:32,253{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2025-04-20 20:57:33,766{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2025-04-20 20:57:33,767{GMT}	INFO	[jepsen test runner] jepsen.core: Analyzing...
2025-04-20 20:57:33,926{GMT}	INFO	[jepsen test runner] jepsen.core: Analysis complete
2025-04-20 20:57:33,944{GMT}	INFO	[jepsen results] jepsen.store: Wrote /home/divi/git/fly.io/store/broadcast/20250420T205719.043+0530/results.edn
2025-04-20 20:57:33,956{GMT}	INFO	[jepsen test runner] jepsen.core: {:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true},
 :stats {:valid? true,
         :count 4,
         :ok-count 4,
         :fail-count 0,
         :info-count 0,
         :by-f {:broadcast {:valid? true,
                            :count 1,
                            :ok-count 1,
                            :fail-count 0,
                            :info-count 0},
                :read {:valid? true,
                       :count 3,
                       :ok-count 3,
                       :fail-count 0,
                       :info-count 0}}},
 :availability {:valid? true, :ok-fraction 1.0},
 :net {:all {:send-count 18,
             :recv-count 18,
             :msg-count 18,
             :msgs-per-op 4.5},
       :clients {:send-count 16, :recv-count 16, :msg-count 16},
       :servers {:send-count 2,
                 :recv-count 2,
                 :msg-count 2,
                 :msgs-per-op 0.5},
       :valid? true},
 :workload {:worst-stale (),
            :duplicated-count 0,
            :valid? true,
            :lost-count 0,
            :lost (),
            :stable-count 1,
            :stale-count 0,
            :stale (),
            :never-read-count 0,
            :stable-latencies {0 0, 0.5 0, 0.95 0, 0.99 0, 1 0},
            :attempt-count 1,
            :never-read (),
            :duplicated {}},
 :valid? true}


Everything looks good! ヽ(‘ー`)ノ
