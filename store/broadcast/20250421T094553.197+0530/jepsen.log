2025-04-21 09:45:53,227{GMT}	INFO	[jepsen test runner] jepsen.core: Test version 6fa3a09e65632bfed86e2d92449604cb4c985c06 (plus uncommitted changes)
2025-04-21 09:45:53,227{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --bin fly-io --node-count 5 --time-limit 5 --rate 2 --nemesis partition
2025-04-21 09:45:53,313{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 5
 :availability nil
 :max-txn-length 4
 :concurrency 5
 :db
 #object[maelstrom.db$db$reify__16612
         "0x6cf58989"
         "maelstrom.db$db$reify__16612@6cf58989"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0xbec2d81" "2025-04-21T09:45:53.197+05:30"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15721
         "0x5f04449a"
         "maelstrom.net$jepsen_net$reify__15721@5f04449a"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__17142
         "0x5634c26c"
         "maelstrom.workload.broadcast$client$reify__17142@5634c26c"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x37a5ac85"
         "java.util.concurrent.CyclicBarrier@37a5ac85"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 2.0
 :checker
 #object[jepsen.checker$compose$reify__11089
         "0x5d4f0fd5"
         "jepsen.checker$compose$reify__11089@5d4f0fd5"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--bin"
  "fly-io"
  "--node-count"
  "5"
  "--time-limit"
  "5"
  "--rate"
  "2"
  "--nemesis"
  "partition")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16905@2092b072"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16886@504521ae"]})
 :nodes ["n0" "n1" "n2" "n3" "n4"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "fly-io"
 :generator
 #object[jepsen.util.Forgettable
         "0x53a65166"
         ((jepsen.generator.Synchronize
           {:gen (jepsen.generator.TimeLimit
                  {:limit 5000000000,
                   :cutoff nil,
                   :gen (jepsen.generator.Any
                         {:gens [(jepsen.generator.OnThreads
                                  {:f #{:nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x3d45ea17"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@3d45ea17"],
                                   :gen (jepsen.generator.Stagger
                                         {:dt 20000000000,
                                          :next-time nil,
                                          :gen (jepsen.generator.FlipFlop
                                                {:gens [#object[jepsen.nemesis.combined$partition_package$start__16909
                                                                "0x685efb22"
                                                                "jepsen.nemesis.combined$partition_package$start__16909@685efb22"]
                                                        (jepsen.generator.Repeat
                                                         {:remaining -1,
                                                          :gen {:type :info,
                                                                :f :stop-partition,
                                                                :value nil}})],
                                                 :i 0})})})
                                 (jepsen.generator.OnThreads
                                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                           "0x24a696c0"
                                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@24a696c0"],
                                   :gen (jepsen.generator.Stagger
                                         {:dt 1000000000,
                                          :next-time nil,
                                          :gen (jepsen.generator.Mix
                                                {:i 1,
                                                 :gens [({:f :broadcast,
                                                          :value 0}
                                                         {:f :broadcast,
                                                          :value 1}
                                                         {:f :broadcast,
                                                          :value 2}
                                                         {:f :broadcast,
                                                          :value 3}
                                                         {:f :broadcast,
                                                          :value 4}
                                                         {:f :broadcast,
                                                          :value 5}
                                                         {:f :broadcast,
                                                          :value 6}
                                                         {:f :broadcast,
                                                          :value 7}
                                                         ...)
                                                        ({:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         {:f :read}
                                                         ...)]})})})]})})})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x6a7c1725"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@6a7c1725"],
                   :gen ({:type :info, :f :stop-partition, :value nil})})})
          (jepsen.generator.Synchronize
           {:gen {:type :log, :value "Waiting for recovery..."}})
          (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
          (jepsen.generator.Synchronize
           {:gen (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                           "0x756476a3"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__12077@756476a3"],
                   :gen (jepsen.generator.EachThread
                         {:fresh-gen {:f :read, :final? true},
                          :context-filters #object[clojure.core$promise$reify__8621
                                                   "0x65e4ee59"
                                                   {:status :pending, :val nil}],
                          :gens {}})})}))]
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15724
         "0x4746d52d"
         "maelstrom.net$jepsen_os$reify__15724@4746d52d"]
 :time-limit 5
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2025-04-21 09:45:54,979{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2025-04-21 09:45:54,980{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2025-04-21 09:45:54,982{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2025-04-21 09:45:54,983{GMT}	INFO	[jepsen node n2] maelstrom.db: Setting up n2
2025-04-21 09:45:54,983{GMT}	INFO	[jepsen node n4] maelstrom.db: Setting up n4
2025-04-21 09:45:54,983{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2025-04-21 09:45:54,983{GMT}	INFO	[jepsen node n3] maelstrom.db: Setting up n3
2025-04-21 09:45:54,984{GMT}	INFO	[jepsen node n4] maelstrom.process: launching fly-io []
2025-04-21 09:45:54,984{GMT}	INFO	[jepsen node n1] maelstrom.process: launching fly-io []
2025-04-21 09:45:54,984{GMT}	INFO	[jepsen node n2] maelstrom.process: launching fly-io []
2025-04-21 09:45:54,984{GMT}	INFO	[jepsen node n3] maelstrom.process: launching fly-io []
2025-04-21 09:45:54,986{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2025-04-21 09:45:54,988{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2025-04-21 09:45:54,989{GMT}	INFO	[jepsen node n0] maelstrom.process: launching fly-io []
2025-04-21 09:45:55,014{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2025-04-21 09:45:55,033{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2025-04-21 09:45:55,033{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	:one
2025-04-21 09:45:55,036{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:read	[]
2025-04-21 09:45:55,037{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	[:isolated {"n3" #{"n2" "n1" "n4" "n0"}, "n2" #{"n3"}, "n1" #{"n3"}, "n4" #{"n3"}, "n0" #{"n3"}}]
2025-04-21 09:45:55,653{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:broadcast	0
2025-04-21 09:45:55,658{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:broadcast	0
2025-04-21 09:45:56,141{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:read	nil
2025-04-21 09:45:56,145{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:ok	:read	[]
2025-04-21 09:45:56,563{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:read	nil
2025-04-21 09:45:56,567{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:read	[0]
2025-04-21 09:45:57,348{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2025-04-21 09:45:57,351{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:read	[0]
2025-04-21 09:45:57,594{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:broadcast	1
2025-04-21 09:45:57,598{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:broadcast	1
2025-04-21 09:45:58,378{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:broadcast	2
2025-04-21 09:45:58,383{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:broadcast	2
2025-04-21 09:45:59,035{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2025-04-21 09:45:59,039{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	[0 1 2]
2025-04-21 09:45:59,451{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:broadcast	3
2025-04-21 09:45:59,455{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:ok	:broadcast	3
2025-04-21 09:45:59,456{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	nil
2025-04-21 09:45:59,456{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	:network-healed
2025-04-21 09:45:59,457{GMT}	INFO	[jepsen worker nemesis] jepsen.generator.interpreter: Waiting for recovery...
2025-04-21 09:46:09,461{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2025-04-21 09:46:09,461{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:read	nil
2025-04-21 09:46:09,462{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:read	nil
2025-04-21 09:46:09,462{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:read	nil
2025-04-21 09:46:09,463{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2025-04-21 09:46:09,464{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:ok	:read	[3]
2025-04-21 09:46:09,464{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:read	[0 1 2]
2025-04-21 09:46:09,464{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:read	[1 2 0]
2025-04-21 09:46:09,464{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:read	[1 2 0]
2025-04-21 09:46:09,465{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	[0 1 2]
2025-04-21 09:46:09,479{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2025-04-21 09:46:09,518{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2025-04-21 09:46:09,518{GMT}	INFO	[jepsen node n3] maelstrom.db: Tearing down n3
2025-04-21 09:46:09,518{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2025-04-21 09:46:09,518{GMT}	INFO	[jepsen node n2] maelstrom.db: Tearing down n2
2025-04-21 09:46:09,519{GMT}	INFO	[jepsen node n4] maelstrom.db: Tearing down n4
2025-04-21 09:46:10,997{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2025-04-21 09:46:10,998{GMT}	INFO	[jepsen test runner] jepsen.core: Analyzing...
2025-04-21 09:46:11,161{GMT}	INFO	[jepsen test runner] jepsen.core: Analysis complete
2025-04-21 09:46:11,189{GMT}	INFO	[jepsen results] jepsen.store: Wrote /home/divi/git/fly.io/store/broadcast/20250421T094553.197+0530/results.edn
2025-04-21 09:46:11,201{GMT}	INFO	[jepsen test runner] jepsen.core: {:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true},
 :stats {:valid? true,
         :count 14,
         :ok-count 14,
         :fail-count 0,
         :info-count 0,
         :by-f {:broadcast {:valid? true,
                            :count 4,
                            :ok-count 4,
                            :fail-count 0,
                            :info-count 0},
                :read {:valid? true,
                       :count 10,
                       :ok-count 10,
                       :fail-count 0,
                       :info-count 0}}},
 :availability {:valid? true, :ok-fraction 1.0},
 :net {:all {:send-count 73,
             :recv-count 66,
             :msg-count 73,
             :msgs-per-op 5.214286},
       :clients {:send-count 48, :recv-count 48, :msg-count 48},
       :servers {:send-count 25,
                 :recv-count 18,
                 :msg-count 25,
                 :msgs-per-op 1.7857143},
       :valid? true},
 :workload {:worst-stale ({:element 0,
                           :outcome :stable,
                           :stable-latency 13804,
                           :lost-latency nil,
                           :known #jepsen.history.Op{:index 5,
                                                     :time 644094957,
                                                     :type :ok,
                                                     :process 2,
                                                     :f :add,
                                                     :value 0},
                           :last-absent #jepsen.history.Op{:index 25,
                                                           :time 14448251414,
                                                           :type :invoke,
                                                           :process 3,
                                                           :f :read,
                                                           :value nil,
                                                           :final? true}}
                          {:element 1,
                           :outcome :stable,
                           :stable-latency 11863,
                           :lost-latency nil,
                           :known #jepsen.history.Op{:index 13,
                                                     :time 2584433516,
                                                     :type :ok,
                                                     :process 0,
                                                     :f :add,
                                                     :value 1},
                           :last-absent #jepsen.history.Op{:index 25,
                                                           :time 14448251414,
                                                           :type :invoke,
                                                           :process 3,
                                                           :f :read,
                                                           :value nil,
                                                           :final? true}}
                          {:element 2,
                           :outcome :stable,
                           :stable-latency 11078,
                           :lost-latency nil,
                           :known #jepsen.history.Op{:index 15,
                                                     :time 3369654423,
                                                     :type :ok,
                                                     :process 1,
                                                     :f :add,
                                                     :value 2},
                           :last-absent #jepsen.history.Op{:index 25,
                                                           :time 14448251414,
                                                           :type :invoke,
                                                           :process 3,
                                                           :f :read,
                                                           :value nil,
                                                           :final? true}}),
            :duplicated-count 0,
            :valid? false,
            :lost-count 1,
            :lost (3),
            :stable-count 3,
            :stale-count 3,
            :stale (0 1 2),
            :never-read-count 0,
            :stable-latencies {0 11078,
                               0.5 11863,
                               0.95 13804,
                               0.99 13804,
                               1 13804},
            :attempt-count 4,
            :lost-latencies {0 10006,
                             0.5 10006,
                             0.95 10006,
                             0.99 10006,
                             1 10006},
            :never-read (),
            :duplicated {}},
 :valid? false}


Analysis invalid! (ﾉಥ益ಥ）ﾉ ┻━┻
