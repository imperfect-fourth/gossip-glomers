2025-04-20 17:17:08,019{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w unique-ids --bin ./fly-io --time-limit 1 --rate 10 --node-count 1 --availability total --nemesis partition
2025-04-20 17:17:08,098{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability :total
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16612
         "0x1f9b8c23"
         "maelstrom.db$db$reify__16612@1f9b8c23"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "unique-ids"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x26e74d50" "2025-04-20T17:17:07.993+05:30"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15721
         "0x6bdc984"
         "maelstrom.net$jepsen_net$reify__15721@6bdc984"]
 :client
 #object[maelstrom.workload.unique_ids$client$reify__21401
         "0x1f299fc3"
         "maelstrom.workload.unique_ids$client$reify__21401@1f299fc3"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0xb997735"
         "java.util.concurrent.CyclicBarrier@b997735"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 10.0
 :checker
 #object[jepsen.checker$compose$reify__11089
         "0x178826db"
         "jepsen.checker$compose$reify__11089@178826db"]
 :argv
 ("test"
  "-w"
  "unique-ids"
  "--bin"
  "./fly-io"
  "--time-limit"
  "1"
  "--rate"
  "10"
  "--node-count"
  "1"
  "--availability"
  "total"
  "--nemesis"
  "partition")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16905@7f913c47"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16886@2c9573f1"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "./fly-io"
 :generator
 #object[jepsen.util.Forgettable
         "0x37a5ac85"
         (jepsen.generator.TimeLimit
          {:limit 1000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                   "0x239fdf8f"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__12077@239fdf8f"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 20000000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.FlipFlop
                                        {:gens [#object[jepsen.nemesis.combined$partition_package$start__16909
                                                        "0x1acd660d"
                                                        "jepsen.nemesis.combined$partition_package$start__16909@1acd660d"]
                                                (jepsen.generator.Repeat
                                                 {:remaining -1,
                                                  :gen {:type :info,
                                                        :f :stop-partition,
                                                        :value nil}})],
                                         :i 0})})})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__12077
                                                   "0x22f3b213"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__12077@22f3b213"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 200000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.Repeat
                                        {:remaining -1, :gen {:f :generate}})})})]})})]
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15724
         "0xe18848d"
         "maelstrom.net$jepsen_os$reify__15724@e18848d"]
 :time-limit 1
 :workload :unique-ids
 :consistency-models [:strict-serializable]
 :topology :grid}

2025-04-20 17:17:09,764{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2025-04-20 17:17:09,765{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2025-04-20 17:17:09,766{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2025-04-20 17:17:09,768{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2025-04-20 17:17:09,769{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2025-04-20 17:17:09,770{GMT}	INFO	[jepsen node n0] maelstrom.process: launching ./fly-io []
2025-04-20 17:17:09,796{GMT}	WARN	[n0 stdout] maelstrom.process: Error!
clojure.lang.ExceptionInfo: Node n0 printed a line to STDOUT which was not well-formed JSON:
{"id": \n}{"src":"n0","dest":"c0","body":{"in_reply_to":1,"type":"init_ok"}}
Did you mean to encode this line as JSON? Or was this line intended for STDERR? See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$parse_msg$fn__16326.invoke(process.clj:47)
	at maelstrom.process$parse_msg.invokeStatic(process.clj:45)
	at maelstrom.process$parse_msg.invoke(process.clj:35)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349$fn__16351.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348$fn__16349.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__16348.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5842.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-20 17:17:18,078{GMT}	INFO	[Jepsen shutdown hook] jepsen.core: Downloading DB logs before JVM shutdown...
